# coding: utf-8

"""
    Grid Tariff API

    Provides grid tariffs from Swedish DSOs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.date_interval import DateInterval
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class FixedPriceComponent(BaseModel):
    """
    A time period in which price details are defined. Price components can be overlapping in time to define the full price for one time period.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Globally unique identifier")
    name: Optional[StrictStr] = Field(default=None, description="A short human readable name.")
    description: Optional[StrictStr] = Field(default=None, description="A longer explanatory text.")
    type: Optional[Annotated[str, Field(strict=True)]] = Field(default='fixed', description="Type describes if the price component is a publicly available price or customer specific.")
    reference: Optional[StrictStr] = Field(default='main', description="Reference to be used to identify this recurring price period in the cost function.")
    valid_period: Optional[DateInterval] = Field(default=None, alias="validPeriod")
    price: Optional[Price] = None
    priced_period: Optional[StrictStr] = Field(default=None, description="A time duration in the format [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples: - \"P1D\" for one day - \"P1M\" for one month - \"P2W\" for two weeks - \"P3Y6M4DT12H30M5S\" for a complex duration.", alias="pricedPeriod")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "type", "reference", "validPeriod", "price", "pricedPeriod"]

    @field_validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"public|specific", value):
            raise ValueError(r"must validate the regular expression /public|specific/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FixedPriceComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of valid_period
        if self.valid_period:
            _dict['validPeriod'] = self.valid_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FixedPriceComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type") if obj.get("type") is not None else 'fixed',
            "reference": obj.get("reference") if obj.get("reference") is not None else 'main',
            "validPeriod": DateInterval.from_dict(obj["validPeriod"]) if obj.get("validPeriod") is not None else None,
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "pricedPeriod": obj.get("pricedPeriod")
        })
        return _obj


