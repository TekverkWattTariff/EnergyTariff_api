# coding: utf-8

"""
    Grid Tariff API

    Provides grid tariffs from Swedish DSOs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.energy_price import EnergyPrice

class TestEnergyPrice(unittest.TestCase):
    """EnergyPrice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnergyPrice:
        """Test EnergyPrice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnergyPrice`
        """
        model = EnergyPrice()
        if include_optional:
            return EnergyPrice(
                id = '216783ff-5dda-4c38-b491-d6f0fcee9a9b',
                name = 'Fusesize 25A',
                description = 'Fixed price for a contract with a fuse size of 25 A.',
                cost_function = '',
                unit = '',
                components = [
                    openapi_client.models.energy_price_component.EnergyPriceComponent(
                        id = '216783ff-5dda-4c38-b491-d6f0fcee9a9b', 
                        name = 'Fusesize 25A', 
                        description = 'Fixed price for a contract with a fuse size of 25 A.', 
                        type = 'fixed', 
                        reference = 'main', 
                        price = openapi_client.models.price.Price(
                            price_ex_vat = 1.337, 
                            price_inc_vat = 1.337, 
                            currency = 'SEK', ), 
                        spot_price_settings = openapi_client.models.spot_price_settings.SpotPriceSettings(
                            multiplier = 1.337, 
                            currency = 'SEK', ), 
                        valid_period = openapi_client.models.date_interval.DateInterval(
                            from_including = '2024-10-01', 
                            to_excluding = '2025-04-01', ), 
                        recurring_periods = [
                            openapi_client.models.recurring_period.RecurringPeriod(
                                reference = 'main', 
                                frequency = '', 
                                active_periods = [
                                    openapi_client.models.active_period.ActivePeriod(
                                        from_including = '00:00:00', 
                                        to_excluding = '01:00:00', 
                                        calendar_pattern_references = openapi_client.models.calendar_pattern_references.CalendarPatternReferences(
                                            include = [
                                                ''
                                                ], 
                                            exclude = [
                                                ''
                                                ], ), )
                                    ], )
                            ], )
                    ]
            )
        else:
            return EnergyPrice(
        )
        """

    def testEnergyPrice(self):
        """Test EnergyPrice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
