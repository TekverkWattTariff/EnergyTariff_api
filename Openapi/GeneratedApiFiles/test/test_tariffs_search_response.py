# coding: utf-8

"""
    Grid Tariff API

    Provides grid tariffs from Swedish DSOs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tariffs_search_response import TariffsSearchResponse

class TestTariffsSearchResponse(unittest.TestCase):
    """TariffsSearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TariffsSearchResponse:
        """Test TariffsSearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TariffsSearchResponse`
        """
        model = TariffsSearchResponse()
        if include_optional:
            return TariffsSearchResponse(
                tariffs = [
                    openapi_client.models.tariff.Tariff(
                        id = '216783ff-5dda-4c38-b491-d6f0fcee9a9b', 
                        name = '', 
                        description = '', 
                        product = '', 
                        company_name = '', 
                        company_org_no = '', 
                        direction = 'consumption', 
                        time_zone = 'Europe/Stockholm', 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        valid_period = openapi_client.models.date_interval.DateInterval(
                            from_including = '2024-10-01', 
                            to_excluding = '2025-04-01', ), 
                        billing_period = P1M, 
                        fixed_price = openapi_client.models.fixed_price.FixedPrice(
                            name = Fusesize 25 A, 
                            description = Fixed price for a contract with a fuse size of 25 A., 
                            cost_function = '', 
                            components = [
                                openapi_client.models.fixed_price_component.FixedPriceComponent(
                                    name = Subscription cost, 
                                    description = The subscription component of the fixed price part., 
                                    type = 'fixed', 
                                    reference = 'main', 
                                    price = openapi_client.models.price.Price(
                                        price_ex_vat = 1.337, 
                                        price_inc_vat = 1.337, 
                                        currency = SEK, ), 
                                    priced_period = '', )
                                ], ), 
                        energy_price = openapi_client.models.energy_price.EnergyPrice(
                            name = Energy transfer, 
                            description = Energy transfer price for one kWh., 
                            unit = kWh, ), 
                        power_price = openapi_client.models.power_price.PowerPrice(
                            name = Energy transfer, 
                            description = Energy transfer price for one kWh., 
                            unit = kW, ), )
                    ],
                mappings = [
                    openapi_client.models.tariff_mapping.TariffMapping(
                        tariff_id = '216783ff-5dda-4c38-b491-d6f0fcee9a9b', 
                        metering_point_ids = [
                            '735999000000000001'
                            ], )
                    ]
            )
        else:
            return TariffsSearchResponse(
        )
        """

    def testTariffsSearchResponse(self):
        """Test TariffsSearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
