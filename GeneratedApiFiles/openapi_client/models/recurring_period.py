# coding: utf-8

"""
    Grid Tariff API

    Provides grid tariffs from Swedish DSOs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.active_period import ActivePeriod
from typing import Optional, Set
from typing_extensions import Self

class RecurringPeriod(BaseModel):
    """
    A short period of time that recurs several times during a season or other long time period.
    """ # noqa: E501
    reference: Optional[StrictStr] = Field(default='main', description="Reference to be used to identify this recurring period in a function.")
    frequency: Optional[StrictStr] = Field(default=None, description="A time duration in the format [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples: - \"P1D\" for one day - \"P1M\" for one month - \"P2W\" for two weeks - \"P3Y6M4DT12H30M5S\" for a complex duration.")
    active_periods: Optional[List[ActivePeriod]] = Field(default=None, alias="activePeriods")
    __properties: ClassVar[List[str]] = ["reference", "frequency", "activePeriods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringPeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_periods (list)
        _items = []
        if self.active_periods:
            for _item_active_periods in self.active_periods:
                if _item_active_periods:
                    _items.append(_item_active_periods.to_dict())
            _dict['activePeriods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringPeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference") if obj.get("reference") is not None else 'main',
            "frequency": obj.get("frequency"),
            "activePeriods": [ActivePeriod.from_dict(_item) for _item in obj["activePeriods"]] if obj.get("activePeriods") is not None else None
        })
        return _obj


